// * If there's schema change, run `npx prisma migrate dev` && `npx prisma generate`

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  username      String
  image         String?
  role          String    @default("user") // "user" or "admin"
  readlist      Book[]
  badges        Badge[]
  primaryBadge  Badge?    @relation("PrimaryBadge", fields: [primaryBadgeId], references: [id])
  primaryBadgeId String?
  reviews       Review[]
  reviewDrafts  ReviewDraft[]
  replies       Reply[]
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Badge {
  id            String    @id @default(uuid())
  name          String
  description   String
  madeBy        String
  users         User[]
  primaryUsers  User[]    @relation("PrimaryBadge")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Book {
  id            String    @id @default(uuid())
  title         String
  link          String
  image         String
  author        String
  publisher     String
  pubDate       DateTime
  isbn          String    @unique
  description   String
  category      Category  @relation(fields: [categoryId], references: [id])
  categoryId    String
  readBy        User[]
  reviews       Review[]
  reviewDrafts  ReviewDraft[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  ratings       Rating[]
}

model Rating {
  id            String    @id @default(uuid())
  book          Book      @relation(fields: [bookId], references: [id])
  bookId        String
  review        Review?   @relation(fields: [reviewId], references: [id])
  reviewId      String?   @unique
  rating        Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id            String    @id @default(uuid())
  name          String    @unique
  books         Book[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Review {
  id            String    @id @default(uuid())
  book          Book      @relation(fields: [bookId], references: [id])
  bookId        String
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  title         String
  description   String
  rating        Rating?
  tags          Tag[]
  replies       Reply[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ReviewDraft {
  id            String    @id @default(uuid())
  book          Book      @relation(fields: [bookId], references: [id])
  bookId        String
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  title         String
  description   String
  tags          Tag[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Tag {
  id            String    @id @default(uuid())
  name          String    @unique
  reviews       Review[]
  reviewDrafts  ReviewDraft[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Reply {
  id            String    @id @default(uuid())
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  reply         String
  review        Review    @relation(fields: [reviewId], references: [id])
  reviewId      String
  comments      Comment[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Comment {
  id            String    @id @default(uuid())
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  comment       String
  reply         Reply     @relation(fields: [replyId], references: [id])
  replyId       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}